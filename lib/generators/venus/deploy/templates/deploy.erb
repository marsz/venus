
begin
  require 'capistrano_colors'
rescue LoadError
  puts "`gem install capistrano_colors` to get output more userfriendly."
end

<% if @use_rvm %> 
require "rvm/capistrano"
set :rvm_type, :system
<% end %>

require 'capistrano/ext/multistage'
set :stages,        %w(production<% if @staging %> staging<%end%>)
set :default_stage, "<% if @staging %>staging<%else%>production<%end%>"

require 'bundler/capistrano'
<% if @whenever %>
set :whenever_command, "bundle exec whenever"
require 'whenever/capistrano'<% end %>

set :application, "<%= @app_name %>"
set :repository,  "<%= @git_uri %>"
set :scm, :git

# set :deploy_via, :remote_cache
set :git_shallow_clone, 1

set :scm_verbose, true
set :use_sudo, false
set :symlink_paths, ['config/database.yml', 'config/setting.yml', 'public/uploads']

<% if @use_assets_pipline %>
# from https://github.com/AF83/capistrano-af83/blob/master/lib/capistrano/af83/deploy/assets.rb
set :assets_dependencies, %w(app/assets lib/assets vendor/assets Gemfile.lock config/routes.rb)
<%end%>

namespace :deploy do

  desc "Restart passenger process"
  task :restart, :roles => [:web], :except => { :no_release => true } do
<% if @use_passenger %>
    run "touch #{current_path}/tmp/restart.txt"
<% end %>
  end

<% if @use_assets_pipline %>
  namespace :assets do

    desc <<-DESC
      Run the asset precompilation rake task. You can specify the full path \
      to the rake executable by setting the rake variable. You can also \
      specify additional environment variables to pass to rake via the \
      asset_env variable. The defaults are:

        set :rake,      "rake"
        set :rails_env, "production"
        set :asset_env, "RAILS_GROUPS=assets"
        set :assets_dependencies, fetch(:assets_dependencies) + %w(config/locales/js)
    DESC
    task :precompile, :roles => :web, :except => { :no_release => true } do
      from = source.next_revision(current_revision) rescue nil
      if !from || capture("cd #{latest_release} && #{source.local.log(from)} #{assets_dependencies.join ' '} | wc -l").to_i > 0
        run %Q{cd #{latest_release} && #{rake} RAILS_ENV=#{rails_env} #{asset_env} assets:precompile}
      else
        logger.info "Skipping asset pre-compilation because there were no asset changes"
      end
    end
  end
<%end%>

  task :symlink_files, :roles => [:web] do
    symlink_paths.each do |path|
      run "ln -sf #{shared_path}/#{path} #{release_path}/#{path}"
    end
  end

end

namespace :remote_rake do
  desc "Run a task on remote servers, ex: cap staging remote_rake:invoke task=cache:clear"
  task :invoke do
    run "cd #{deploy_to}/current; RAILS_ENV=#{rails_env} bundle exec rake #{ENV['task']}"
  end
end

# cap staging tail_log
task :tail_log, :roles => :app do
  run "tail -f -n 100 #{shared_path}/log/#{rails_env}.log"
end


after "deploy:finalize_update", "deploy:symlink_files"
after "deploy", "deploy:cleanup"